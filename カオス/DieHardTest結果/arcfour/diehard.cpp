//DiehardTest実行部

#include "diehard.h"
extern "C"
{
	#include <windows.h>
}

//--------------------------------------------------------------------------
void DiehardTest(int mode, int iter, unsigned char* mykey)
{
	//double h2, h3;
	unsigned int cparam = 0, cparam2 = 0;
	int allcount = 0;	
	int rcount = 0;
	int nrcount = 0;
	int result[18] = {0};
	int test[18] = {0};
	int i, iter2 = 0;
	char *istr = "0123456789abcdef";
	ArcfourContext mycontext;
	FILE *fp, *fp1;
	static _int32 Check_Data[RNDCHKNUM32] = {};
	unsigned char* check_dat08 = (unsigned char*)Check_Data;

	static unsigned char sn[RNDCHKNUM08] = {}, rc[RNDCHKNUM08] = {};
	static unsigned char md2[RNDCHKNUM08] = {}, md3[RNDCHKNUM08] = {};

	int param1;
	using namespace std;
	std::string filename, filename2;

//
//	std::cin >> number;
	filename = "mykey";
	if(mode == 1)
	{
		CreateDirectory("./\\diehard_output_s", NULL);
		filename += istr[iter];
		filename2 = "diehard_output_s/diehard_" + filename + ".txt";
		fp = fopen(filename2.c_str(), "wt");
		filename2 = "diehard_output_s/diehard2_" + filename + ".txt";
		fp1= fopen(filename2.c_str(), "wt");
	}
	else
	{
		CreateDirectory("./\\diehard_output_d", NULL);
		cout << "change key(0〜15) first:";
		cin >> iter;
		filename += istr[iter];
		cout << "change key(0〜15) second:";
		cin >> iter2;
		filename += istr[iter2];
		filename2 = "diehard_output_d/diehard_" + filename + ".txt";
		fp = fopen(filename2.c_str(), "wt");
		filename2 = "diehard_output_d/diehard2_" + filename + ".txt";
		fp1= fopen(filename2.c_str(), "wt");
	}

	mykey_init(mykey);		

	for( cparam = 0x00; !(cparam > 0xff); cparam += 0x01) {
		if(mode == 1)
		{
			allcount++;
			mykey[iter] = cparam;
			printf("cparam = %3d : ", cparam);
			fprintf(fp1, "cparam = %3d : ", cparam);

			arcfour_init(&mycontext, mykey, 16);
			arcfour_encrypt(&mycontext, check_dat08, sn, RNDCHKNUM08);

			//DiehardTest開始		
			if ( diehard( Check_Data, result ) == 1 ) {
				for (i = 0; i < 18; i++ ) {
					printf( "%d", result[i] );
					fprintf( fp1, "%d",result[i] );
				}
				printf( " : Randam\n" );
				fprintf( fp1, " : Randam\n" );
				for(i =0; i< 18; i++) {
					if(result[i]==1) test[i]++;
				}
				rcount++;
			}
			else {
				nrcount++;
				for (i = 0; i < 18; i++ ) {
					printf( "%d", result[i] );
					fprintf( fp1, "%d", result[i] );
				}
				printf( " : Not_Randam\n" );
				fprintf( fp1, " : Not_Randam\n" );
				for(i =0; i< 18; i++) {
					if(result[i]==1) test[i]++;
				}
			}
		}
		else
		{
			for( cparam2 = 0x00; !(cparam2 > 0xff); cparam2 += 0x01) {
				allcount++;
				mykey[iter] = cparam;
				mykey[iter2] = cparam2;

				printf("cparam = %3d , cparam = %3d : ", cparam, cparam2);
				fprintf(fp1, "cparam = %3d , cparam = %3d : ", cparam, cparam2);

				arcfour_init(&mycontext, mykey, 16);
				arcfour_encrypt(&mycontext, check_dat08, sn, RNDCHKNUM08);

				//DiehardTest開始		
				if ( diehard( Check_Data, result ) == 1 ) {
					for (i = 0; i < 18; i++ ) {
						printf( "%d", result[i] );
						fprintf( fp1, "%d",result[i] );
					}
					printf( " : Randam\n" );
					fprintf( fp1, " : Randam\n" );
					for(i =0; i< 18; i++) {
						if(result[i]==1) test[i]++;
					}
					rcount++;
				}
				else {
					nrcount++;
					for (i = 0; i < 18; i++ ) {
						printf( "%d", result[i] );
						fprintf( fp1, "%d", result[i] );
					}
					printf( " : Not_Randam\n" );
					fprintf( fp1, " : Not_Randam\n" );
					for(i =0; i< 18; i++) {
						if(result[i]==1) test[i]++;
					}
				}
			}
		}
	}
/*
	//for( h2 = H2_START; !(h2 > H2_STOP); h2 += H2_STEP) {
		//cn.ParamChange(h2, 2);
		for( h3 = H3_START; !(h3 > H3_STOP); h3 += H3_STEP) {
			allcount++;
			printf("h1= % 10.6lf h2= % 10.6lf : ", h2, h3);
			fprintf(fp1, "% 10.6lf,% 10.6lf,", h2, h3);
			fprintf(fp1, "h2= % 10.6lf h3= % 10.6lf : ", h2, h3);
			cn.ParamChange(h3, param1);
			cn.Mod(sn, RNDCHKNUM16, check_dat16);	//テストデータ作成

			//DiehardTest開始		
			if ( diehard( Check_Data, result ) == 1 ) {
				for (i = 0; i < 18; i++ ) {
					printf( "%d", result[i] );
					fprintf( fp1, "%d",result[i] );
				}
				printf( " : Randam\n" );
				fprintf( fp1, " : Randam\n" );
				for(i =0; i< 18; i++) {
					if(result[i]==1) test[i]++;
				}
				rcount++;
			}
			else {
				nrcount++;
				for (i = 0; i < 18; i++ ) {
					printf( "%d", result[i] );
					fprintf( fp1, "%d", result[i] );
				}
				printf( " : Not_Randam\n" );
				fprintf( fp1, " : Not_Randam\n" );
				for(i =0; i< 18; i++) {
					if(result[i]==1) test[i]++;
				}
			}

		}
	//}
*/

	//テスト結果表示
/*	switch(type) {
		case 1: fprintf( fp, "DiehardTestの結果（第1式と第2式を入れ替え）\n"); break;
		case 2: fprintf( fp, "DiehardTestの結果（第1式の非線形関数を増やした）\n"); break;
		case 3: fprintf( fp, "DiehardTestの結果（VolterraFilter2次）\n"); break;
		case 4:	fprintf( fp, "DiehardTestの結果（従来法）\n"); break;
		default: printf("Error\n"); break;
	}
*/
//	fprintf( fp, "内部状態の初期値\n");
//	fprintf( fp, "x1(n-1)=%lf, x2(n-1)=%lf, x3(n-1)=%lf\n", X1, X2, X3);
//	fprintf( fp, "固定されたパラメータ\n");
//	fprintf( fp, "θ=%lf,α=%lf\nh0=%lf, h1=%lf\nh11=%lf h12=%lf, h13=%lf\nh21=%lf, h22=%lf, h23=%lf\nh31=%lf, h32=%lf, h33=%lf\nh123=%lf\n",SITA,ALPHA,H0,H1,H11,H12,H13,H21,H22,H23,H31,H32,H33,H123);
//	fprintf( fp, "変化させたパラメータ\n");
//	fprintf( fp, "h2=%lf〜%lf （step:%lf）\n",H2_START,H2_STOP,H2_STEP);
//	fprintf( fp, "h3=%lf〜%lf （step:%lf）\n\n",H3_START,H3_STOP,H3_STEP);
	fprintf( fp, "テスト回数：%5d回\n", allcount );
	fprintf( fp, "Randam____：%5d個\n", rcount );
	fprintf( fp, "NotRandam_：%5d個\n", allcount-rcount );
	fprintf( fp, "合格率____：%3.2lf％\n", ((double)rcount/(double)allcount)*100 );
	fprintf( fp, "\nテスト詳細\n");
	for(i=0; i<18; i++) fprintf( fp, "・テスト%2dの成功数：%5d回（成功率 %3.2lf％）\n", i,test[i],((double)test[i]/(double)allcount)*100);
	fclose(fp);
	fclose(fp1);
}


int Fspv=1;
double Rcstart=-3.000977,Rcend=3.0,Rcstep=0.02;
int XnType=1;

class ivector3{
public:
	static int dim;

	int vb[IVECTOR3DIM];

	ivector3(const int a=0,const int b=0,const int c=0){vb[0]=a;vb[1]=b;vb[2]=c;}
	ivector3 operator=(const ivector3& a)
	{
		for(int i=0;i<IVECTOR3DIM;i++) vb[i]=a.vb[i];
		return *this;
	}
	void setvalue(const int a,const int b=0,const int c=0){vb[0]=a;vb[1]=b;vb[2]=c;}
	friend ivector3 operator-(const ivector3& a, const ivector3& b)
	{
		ivector3 ans(a.vb[0]-b.vb[0],a.vb[1]-b.vb[1],a.vb[2]-b.vb[2]);
		return ans;
	}
	friend int operator==(const ivector3& a,const ivector3& b){
		int rst=1;
		for(int i=0;i<dim;i++)
			if(a.vb[i] != b.vb[i]) {rst=0;break;}
		return rst;
	}
	friend int operator!=(const ivector3& a,const ivector3& b){
		int rst=0;
		for(int i=0;i<dim;i++)
			if(a.vb[i] != b.vb[i]) {rst=1;break;}
		return rst;
	}
};

int ivector3::dim = IVECTOR3DIM;


class model1_short{
public:
	static short VarBitlen;// =16bits
	static short AccBitlen;//=32bits
	short Stc,Al,Bt,Gm,K,D,E;
	short Qx,Qbit;
	ivector3 pxnm1;
	ivector3 Initialvalue;

	model1_short(void);
	ivector3 Dynamics_mod(const ivector3& a,short dat);
	ivector3 Dynamics_dem(const ivector3& a,short dat,int *rcv);
	int gx(const short );
} Modsr;

model1_short::model1_short(void)
{
	Qbit=QBIT;
	Qx=1<<Qbit;
	Stc=(short)(INIT_STC*Qx);
	Al=(short)(INIT_AL*Qx);
	Bt=(short)(INIT_BT*Qx);
	Gm=(short)(INIT_GM*Qx);
	K=(short)(INIT_K*Qx);
	D=(short)(INIT_D*Qx);
	E=(short)(INIT_E*Qx);
	Initialvalue.setvalue(INIT_MODEL1_INITVALUE0,INIT_MODEL1_INITVALUE1,INIT_MODEL1_INITVALUE2);
	pxnm1=Initialvalue;
}

int model1_short::gx(const short x)
{
	if(x>=E) return((int)K*(int)x-(int)D*(int)Qx);
	else if(x>-E) return(0);
	else return((int)K*(int)x+(int)D*(int)Qx);
}


ivector3 model1_short::Dynamics_mod(const ivector3& a,short dat)
{
	ivector3 b;
	short x1nm1=(short)(a.vb[0]/(int)Qx),x2nm1=(short)(a.vb[1]/(int)Qx),x3nm1=(short)(a.vb[2]/(int)Qx);
	b.setvalue((int)dat*(int)Qx-gx(x1nm1)+(int)Stc*(int)Qx+(int)Al*(int)x3nm1,
		(int)x1nm1*(int)Qx-(int)Bt*(int)x2nm1-(int)Gm*(int)x3nm1,
		a.vb[1]);
	return b;
}

ivector3 model1_short::Dynamics_dem(const ivector3& a,short dat,int *rcv)
{
	ivector3 b;
	short x1nm1=(short)(a.vb[0]/(int)Qx),x2nm1=(short)(a.vb[1]/(int)Qx),x3nm1=(short)(a.vb[2]/(int)Qx);
	b.setvalue((int)dat*(int)Qx,
		(int)x1nm1*(int)Qx-(int)Bt*(int)x2nm1-(int)Gm*(int)x3nm1,
		a.vb[1]);
	*rcv=(int)dat*(int)Qx+gx(x1nm1)-(int)Stc*(int)Qx-(int)Al*(int)x3nm1;
	return b;
}


template <class varType>
void sort(varType list[],int n)
{
	varType t,tt;
	int iu[34],il[34],i,j,k,l,m,ij;

	m=1;i=1;j=n;
L5:	if(i>=j) goto L70;
L10:	k=i;
		ij=(i+j)/2;
		t=list[ij];
		if(list[i]>t){
			list[ij]=list[i];
			list[i]=t;
			t=list[ij];
		}
		l=j;
		if(list[j]<t){
			list[ij]=list[j];
			list[j]=t;
			t=list[ij];
			if(list[i]>t){
				list[ij]=list[i];
				list[i]=t;
				t=list[ij];
			}
		}
		while(1){
			do{
				l--;
			} while(list[l]>t);
			tt=list[l];
			do{
				k++;
			} while(list[k]<t);
			if(k>l) break;
			list[l]=list[k];
			list[k]=tt;
		}
		if(l-i > j-k){
			il[m]=i;
			iu[m]=l;
			i=k;
			m++;
		}
		else {
			il[m]=k;
			iu[m]=j;
			j=l;
			m++;
		}
		goto L80;
L70:	m--;
		if(m<=0) return;
		i=il[m];
		j=iu[m];
L80:	if(j-i >= 11) goto L10;
	if(i==1) goto L5;
	i--;
	while(1){
		do{
			i++;if(i==j) goto L70;
			t=list[i+1];
		} while(list[i] <= t); 
		k=i;
		do{
			list[k+1]=list[k];
			k--;
		} while(t < list[k]);
		list[k+1]=t;
	}
}

int decrand(double pp[],int pnum)
{
	for(int i=0;i<pnum;i++)
		if(pp[i]<0.001 || pp[i]>0.999) return 0;
	return 1;
}

double phi(double x)
{
	double pwr,sum,a,b,ph,cph,z,h;
	double v[15]={
		1.2533141373155000,   0.6556795424187985,
		0.4213692292880545,   0.3045902987101033,
		0.2366523829135607,   0.1928081047153158,
		0.1623776608968675,   0.1401041834530502,
		0.1231319632579329,   0.1097872825783083,
		0.9902859647173193e-1,0.9017567550106468e-1,
		0.8276628650136917e-1,0.7647576101624850e-1,
		0.7106958053885211e-1};
	int i,j;
	if(x>=0.0) ph=1.0; else ph=0.0;
	if(fabs(x)>7.0) return ph;
	if(x>=0.0) cph=0.0; else cph=1.0;
	j=(int)(fabs(x)+0.5);if(j>14) j=14;
	z=(double)j;h=fabs(x)-z;
	a=v[j];b=z*a-1.0;
	pwr=1.0;sum=a+h*b;
	for(i=2;i<=24-j;i+=2){
		a=(a+z*b)/(double)i;
		b=(b+z*a)/(double)(i+1);
		pwr*=h*h;
		sum+=pwr*(a+h*b);
	}
	cph=sum*exp(-0.5*x*x-0.918938533204672);
	ph=1.0-cph;
	if(x<0.0) ph=cph;
	return ph;
}

double chisq(double x,int n)
{
	double csq=0.0,d,s,t,mx;
	int l,i;

	if(x<=0.0) return csq;
	if(n>20){
		t=(pow(x/(double)n,0.33333333)-1.0+(0.22222/(double)n))/sqrt(0.22222/(double)n);
		if(t>8.0) t=8.0;
		csq=phi(t);
		return csq;
	}
	l=4-n%2;
	d=(double)(n/3);if(d>1.0) d=1.0;
	for(i=l;i<=n;i+=2){
		d*=x/((double)i-2.0);
		csq+=d;
	}
	if(l==3){
		s=0.5*x;if(s>50.0) s=50.0;
		s=sqrt(s);
		mx=0.5*x;if(mx>50.0) mx=50.0;
		csq=phi(s/0.7071068)-exp(-mx)*0.564189*csq/s;
	}
	else {
		s=0.5*x;if(s>50.0) s=50.0;
		csq=1.0-exp(-s)*(1.0+csq);
	}
	return csq;
}


double sp(double x,int i)
{
	double ssp=0.0,t;
	switch(i){
	case 1:
	case 2:
	case 3:
	case 4:
	case 5:
	case 6:
	case 7:
		t=fabs(10.0*x-0.5-(double)i);
		if(t>1.5) break;
		if(t<=0.5) ssp=1.5-2.0*t*t;
		else ssp=2.25-t*(3.0-t);
		break;
	case 8:
		if(x<=0.8 || x>=1.0) break;
		ssp=100.0*(x-0.9)*(x-0.9)-1.0;
		break;
	case 9:
		if(x<=0.0 || x>=0.05) break;
		if(x<=0.01) ssp=-100.0*x;
		else ssp=25.0*(x-0.05);
		break;
	case 10:
		if(x<=0.98 || x>=1.0) break;
		ssp=0.1-10.0*fabs(x-0.99);
		break;
	}
	return ssp;
}


void kstest(double y[],int n,double& p)
{
	int i;
//	int j,m;
	double z,t;
//	double e,a;
/*	int l[9][11]={
		 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		 0,40,46,37,34,27,24,20,20,88,59,
		 0,43,37,29,27,20,22,92,63,48,41,
		 0,30,30,25,24,82,59,42,37,26,28,
		 0,26,22,62,48,33,30,23,23,22,18,
		 0,49,34,22,20,16,17,17,12,17,17,
		 0, 7, 8, 4, 7, 5, 1,40,18,19,14,
		 0,16,13,10, 9,59,20,10, 4, 1, 1,
		 0, 0,-1,41,43,36,112,15,95,32,58
	};
*/
	sort(y,n);
	z=-(double)n*(double)n;
	for(i=1;i<=n;i++){
		t=y[i]*(1.0-y[n+1-i]);
		if(t<1.0e-20) t=1.0e-20;
		z-=(double)(i+i-1)*log(t);
	}
	z/=(double)n;
	p=0.0;
	if(z>=0.01){
		if(z <= 2.0) {
			p=2.0*exp(-1.2337/z)*(1.0+z/8.0-0.04958*z*z/(1.325+z))/sqrt(z);
		}
		else if(z <= 4.0){
			p=1.0-0.6621361*exp(-1.091638*z)-0.95059*exp(-2.005138*z);
		}
		else {
			p=1.0-0.4938691*exp(-1.050321*z)-0.5946335*exp(-1.527198*z);
		}
	}
/*	m=n-2;if(m>8) m=8;
	e=0.0;
	for(j=1;j<=10;j++)
		e+=l[j][m]*sp(p,j)*0.0001;
	if(n>10) e*=10.0/(double)n;
	a=p+e;
*/
}

int rank(unsigned int r[],int m,int n)
{
	unsigned int msk[33]={0x00000000,
	 0x00000001, 0x00000002, 0x00000004, 0x00000008,
	 0x00000010, 0x00000020, 0x00000040, 0x00000080,
	 0x00000100, 0x00000200, 0x00000400, 0x00000800,
	 0x00001000, 0x00002000, 0x00004000, 0x00008000,
	 0x00010000, 0x00020000, 0x00040000, 0x00080000,
	 0x00100000, 0x00200000, 0x00400000, 0x00800000,
	 0x01000000, 0x02000000, 0x04000000, 0x08000000,
	 0x10000000, 0x20000000, 0x40000000, 0x80000000};

	int rnk,i,j,k,ii,x;
	rnk=0; j=n; i=1;

	while(1){
//L33:
		for(ii=i;ii<=m;ii++){
			if((r[ii] & msk[j]) == msk[j]){
				x=r[ii];r[ii]=r[i];r[i]=x;
				for(k=i+1;k<=m;k++){
					if((r[k] & msk[j])==msk[j]) r[k]^=x;
				}
				rnk++;
				if(i==m || j==1) return rnk;
				i++;
//				j--;
//				goto L33;
				break;
			}
		}
		j--;
		if(j==0) return rnk;
//		goto L33;
	}
}

void chsqts(const double lambda,int mspace[],const int nsampl,double& pp)
{
	int k[512],i,j,ie,l,m;
//	int lb,lt;
	double ex[501],obs[501],ps[501],p,s;
	for(i=500;i<512;i++) k[i]=0;			/////////////////////////////////////////////////
	ie=(int)(lambda+4.0*sqrt(lambda));
	for(i=0;i<=ie;i++){
		ex[i]=ps[i]=0.0;
		k[i]=0;
	}
	p=exp(-lambda);
	ps[0]=p*(double)nsampl;
	k[0]=0;j=0;
	s=p*(double)nsampl;
	if(s>5.0){
		j=1;ex[0]=s;s=0.0;
	}
	for(i=1;i<=ie;i++){
		p*=(double)lambda/(double)i;
		ps[i]=ps[i-1]+p*(double)nsampl;
		s+=p*(double)nsampl;
		k[i]=j;
		if(ps[i]>(double)nsampl-5.0){
			ex[j]=s+(double)nsampl-ps[i];
			for(l=i+1;l<=nsampl;l++) k[l]=j;
			break;
		}
		if(s<5.0) continue;
		ex[j]=s;
		j++;
		s=0.0;
	}
	for(i=0;i<=100;i++) obs[i]=0.0;
	for(i=1;i<=nsampl;i++){
		l=k[mspace[i]];
		obs[l]+=1.0;
	}
	s=0.0;
	for(m=0;m<=j;m++) 
		s+=(obs[m]-ex[m])*(obs[m]-ex[m])/ex[m];
/*	lb=0;
	m=k[0];
	printf(" duplicate       number       number\n  spacings       observed     expected\n");
	for(i=1;i<=100;i++){
		if(k[i]==m) continue;
		lt=i-1;
		if(lb!=lt) printf(" %2d to %2d %lf %lf\n",lb,lt,obs[m],ex[m]);
		else printf("   %6d %lf %lf\n",lb,obs[m],ex[m]);
		m=k[i];
		lb=i;
		if(m==j) break;
	}
*/
//	printf(" %2d to INF %lf %lf\n",lb,obs[m],ex[m]);
	pp=chisq(s,j);
//	printf(" Chisquare with %2d d.o.f. = %lf p-value=%lf\n",j,s,pp);
}

int inbits(int jb,int kr,int mask)
{
	return ((unsigned int)jb>>kr) & mask;
}

void cdbday(int data[],double pv[],int& pnum)
{
	int b[4097],c[4097],mspace[1001];
	double pks[65],pp;
	int lw,nbits,m,nsampl,is,mask,kr,i,j,ct,l,lk;
//	int im;
	double alam,s;

	lw=32;nbits=24;m=512;nsampl=500;pnum=0;
	alam=pow((double)m,3.0)/pow(2.0,(double)nbits+2.0);
//	printf(" Birthday spacing test, m=%4d n=2**%2d lambda=%lf\n",m,nbits,alam);
	is=8;mask=(1<<nbits)-1;
	for(kr=32-nbits;kr>=0;kr--){
		s=0.0;ct=0;
		for(j=1;j<=nsampl;j++){
			for(i=1;i<=m;i++)
				b[i]=inbits(data[ct++],kr,mask);
			sort(b,m);
			c[1]=b[1];
			for(i=2;i<=m;i++) c[i]=b[i]-b[i-1];
			sort(c,m);
			l=0;
			for(i=2;i<=m;i++){
				lk=0;
				if(c[i]!=c[i-1]) continue;
				lk++;l++;
			}
			s+=(double)l;
			mspace[j]=l;
		}
//		printf("For a sample of size %4d:     mean     \n",nsampl);
//		printf("using bits %2d to %2d %lf \n",33-nbits-kr,32-kr,s/(double)nsampl);
		chsqts(alam,mspace,nsampl,pp);
		pks[9-kr]=pp;
		ct=0;
	}
//	printf("The 9 p-values were ");
//	for(im=1;im<=9;im++) printf("%lf ",pks[im]);
//	printf("\n");
	kstest(pks,9,pp);pv[pnum]=pp;pnum++;
//	printf(" A KSTEST for the 9 p-values yields %lf\n",pp);
}

unsigned int i8bit(int dat,int kr)
{
	return ((unsigned int)dat >> kr) & 0x000000ff;
}

void cdbinrnk(int data[],double pv[],int& pnum)
{
	double pp[26],pq[26],pks;
	double p[7]={0.0,0.0,0.149858e-6,0.808926e-4,0.936197e-2,0.217439,0.773118};
	int k[7],ij,i,ct,kr,kk,l,mr;
	char *rk[7]={"","","","","r<=4","r =5","r =6"};
	double s,e,t;
	unsigned int r[7];

	for(ij=25;ij>=1;ij--){
		ct=0;
		kr=ij-1;
//		printf(" b-rank test for bits %2d to %2d ",25-kr,32-kr);
//		printf("\n          Observed     expected    (o-e)^2/e          sum\n");
		for(kk=2;kk<=6;kk++) k[kk]=0;
		for(l=1;l<=100000;l++){
			for(i=1;i<=6;i++) r[i]=i8bit(data[ct++],kr);
			mr = rank(r, 6, 8);	if(mr<4) mr = 4;
			k[mr]++;
		}
		s=0.0;
		for(l=4;l<=6;l++){
			if(l>4) e=100000.0*p[l];
			else e=100000.0*(p[2]+p[3]+p[4]);
			t=((double)k[l]-e)*((double)k[l]-e)/e;
			s+=t;
//			printf(" %s %12d %12.1lf %12.3lf %12.3lf\n",rk[l],k[l],e,t,s);
		}
		pp[kr]=1.0-exp(-s/2.0);
//		printf("  p=1-exp(-sum/2)=%lf\n",pp[kr]);
	}
//	for(i=24;i>=0;i--) printf("%lf ",pp[i]);
//	printf("\n");
	pq[0]=0.0;for(i=0;i<=24;i++) pq[i+1]=pp[i];
//	printf("b-rank test summary\nThe KS test for those 25 supposed UNI's yields\n");
	kstest(pq,25,pks);pv[pnum]=pks;
//	printf("KS p-value=%lf\n",pks);
	pnum++;
}

void cdbitst(int data[],double pv[],int& pnum)
{
	unsigned int w[32768],mbit[32];
	double mu,sigma,s,x;
	int n,kpow,ntries,ct,i,nt,k2,ic,ib,kount;
	unsigned int j,num,l,k;

	n=20;kpow=21;ntries=20;sigma=428.0;pnum=0;
	mbit[0]=1;for(i=1;i<32;i++) mbit[i]=1<<i;
//	printf("      THE OVERLAPPING 20-tuples BITSTREAM TEST,\n           20 BITS PER WORD, 2^21 words.");
//	printf("   This test samples the bitstream 20 times.\n");
	mu=pow(2.0,20.0)*exp(-pow(2.0,(double)kpow-20.0));
//	printf("No. missing words should average %lf with sigma=%lf",mu,sigma);
	ct=0;
	j=data[ct++];j&=0x000fffff;
	s=0.0;k2=1<<(kpow-5);//ss=0.0;nint=1024;
//	printf("Bitstream test\n");
	for(nt=1;nt<=ntries;nt++){
		for(i=0;i<32768;i++) w[i]=0;
		//printf("k2=%d\n",k2);//*************
		for(ic=1;ic<=k2;ic++){
			num=data[ct++];
			for(ib=1;ib<=32;ib++){
				j=((j & 0x0007ffff) << 1) + (num & 0x00000001);
				num>>=1;
				l=j & 0x0000001f;
				k=j>>5;
				w[k]|=mbit[l];
			}
		}
		kount=0;
		for(k=0;k<32768;k++)
			for(l=0;l<32;l++)
				if((w[k] & mbit[l]) == 0) kount++;
		x=(kount-mu)/sigma;
		pv[pnum]=phi(x);
//		printf("test %2d :  %7d  missing words, %lf sigmas from mean, p-value=%lf\n",nt,kount,x,pv[pnum]);
		pnum++;
	}
}

unsigned int ikbit(int dat,int kr,unsigned int mk)
{
	return ((unsigned int)dat >> kr) & mk;
}

void cdomso(int data[],int mode,double pv[],int& pnum)
{
	unsigned int w[32768],mbit[32];
	double sigs[4]={0.0,290.0,295.0,339.0};
	char *ctest[4]={"","OPSO","OQSO"," DNA"};
	unsigned int j,mk,mkk,k2;
	int i,k,k3,kpow,ntries,krk,ct,kr,lk,kij,nt,ic,l,kk,kount;
	double tr,x;

	j=1232456789;
	for(i=1;i<=1000000;i++) j*=69069;
	mbit[0]=1;for(i=1;i<32;i++) mbit[i]=1<<i;
	ntries=1;kpow=21;k3=1<<kpow;
	tr=pow(2.0,20.0)*exp(-pow(2.0,(double)(kpow-20)));
	k=2*mode;if(mode==3) k=10;
	k2=1<<(20/k);pnum=0;
//	printf("%s \n",ctest[mode]);
//	printf("Output: No. missing words (mw), equiv normal variate (z), p-value (p)\n");
//	printf("                                     mw        z        p\n");
	for(krk=33-20/k;krk>=1;krk--){
		kr=33-20/k-krk;lk=20/k;
		mk=(1 << lk)-1;mkk=(1 << (20-lk))-1;
		for(kij=1;kij<=ntries;kij++){
			ct=0;
			for(nt=1;nt<=ntries;nt++){
				for(i=0;i<32768;i++) w[i]=0;
				j=ikbit(data[ct++],kr,mk);
				for(i=1;i<k;i++)
					j=k2*j+ikbit(data[ct++],kr,mk);
				for(ic=1;ic<=k3;ic++){
					j= ((j & mkk) << lk )+ikbit(data[ct++],kr,mk);
					l=j & 0x0000001f;
					kk=j >> 5;
					w[kk]|=mbit[l];
				}
				kount=0;
				for(kk=0;kk<32768;kk++)
					for(l=0;l<32;l++)
						if((w[kk] & mbit[l])==0) kount++;
				x=((double)kount-tr)/sigs[mode];
				pv[pnum]=phi(x);
//				printf("%s using bits %2d to %2d %14d %lf %lf\n",ctest[mode],33-20/k-kr,32-kr,kount,x,pp[pnum]);
				pnum++;
			}
		}
	}
}

int kp(int c[])
{
	int map[60]={
		39,38,37,36,41,40,54,55,56,57,
		58,59,49,48,52,53,50,51,42,43,
		44,45,46,47,33,32,31,30,35,34,
		12,13,14,15,16,17,29,28,24,25,
		27,26,21,20,19,18,23,22, 2, 3,
		5, 4, 1, 0,10,11, 9, 8, 6, 7};
	int b[6],i,j,l,kkp,s,t;
	for(i=1;i<=5;i++) b[i]=c[i-1];//** optimazed to c-lang.
	kkp=0;
	for(i=5;i>=2;i--){
		t=b[1];l=1;
		for(j=2;j<=i;j++){
			if(b[j]<t) continue;
			t=b[j];l=j;
		}
		kkp=i*kkp+l-1;
		s=b[i];
		b[i]=b[l];
		b[l]=s;
	}
	if(kkp<60) kkp=map[kkp];
	return kkp;
}

void cdoperm5(int data[],double pv[],int& pnum)
{
	static int r[61][61]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,5817257,-6873271,-5128747,-5402629,777663,980677,2407731,2347927,2954082,2749952,2512448,3103860,2631372,1019585,5833700,-1609797,-136098,14746,4199803,15820046,15661640,5888319,-3837421,-1317810,-375269,-496546,149397,21483,-341148,314595,2772502,843578,8843654,-1211426,2341534,3013752,1250340,-699051,-654566,961558,-2338987,-2621631,2873613,1261792,8000951,-1746067,6638,-47636,-5088578,-5013620,-3253847,-3180615,2711412,3844202,880534,-1042552,6946781,-3015244,406795,1147260},
		{0,0,5940872,-5186478,-5307926,773214,938192,2462991,2185748,2756969,2860993,2501911,3080424,2695718,1101077,7899915,-3833937,-175045,-54950,6072206,13434946,15661640,5768163,-3875391,-1169953,-292941,-536013,124632,45505,-337415,265604,2721922,823928,8523149,-1017852,2281795,2999166,1218871,-700064,-634661,957048,-2629675,-2235002,2733295,1136430,7885100,-1626583,-58766,124832,-4795309,-5249849,-3154841,-3094350,2642865,3795316,872576,-1015702,6779035,-2926770,386412,1127795},
		{0,0,0,12208259,1266547,-1384963,-1449671,-3169754,-1595651,-1946939,-1940155,-3378061,-3782485,-1922633,-1103400,-4529238,1922627,67943,-594084,-4436559,-10716612,-12948181,-3099354,3086687,741196,127286,909813,551771,418521,-174949,-545067,-1869313,-876135,-7345496,178672,-2378999,-2769171,-1090475,331067,236296,-551403,2892697,2810799,-2367546,-1617469,-4838379,1451362,-568191,978772,574172,2759542,386836,3123220,-1235398,-2188412,-119033,987303,-5601207,1946655,-583034,-1102184},
		{0,0,0,0,12576469,-1912105,-1491496,-1977361,-3787433,-3866431,-3931068,-2169174,-2042830,-2367628,-1217010,-5574861,2386416,-567819,399012,-5292193,-13303845,-13360923,-5639180,3651213,1466137,880935,-148585,-363477,-353888,618037,631948,-2599440,-1019748,-8865897,687501,-2968293,-3124000,-1089813,119334,419444,-786927,3367082,3316348,-2961598,-1738843,-6050705,1707414,789397,-308316,1178460,3734616,3617835,1360963,-2307922,-2689133,-407480,1067944,-6848988,2699162,-925197,-1068995},
		{0,0,0,0,0,11788007,1145706,1193936,968826,3495027,3575638,1116536,3617330,3145167,110228,7883910,-2325769,103020,-580856,7068780,17106824,17369039,5744570,-6152687,-983990,-364426,-482051,205432,171091,-512242,192023,3244057,1864653,11153794,-125218,2622003,3388711,1601939,-856517,-817212,825017,-3038222,-2961270,3416768,2474327,8116870,-1917663,572557,-258900,-3200854,-5353978,-3054952,-4014445,410478,3983005,1088413,-1375640,8044077,-3289536,441887,1325474},
		{0,0,0,0,0,0,12630118,3156565,3488013,1910767,1992878,2735849,1745194,2635085,1072076,9179053,-2371600,-331321,-726418,7681229,19285416,19432752,6482845,-4523253,-3272693,-597204,-336131,-60141,313513,-626813,170991,4236377,1050429,11461421,-1234081,3788310,4585317,1236864,-894703,-1197329,1736061,-3427987,-3398261,5012230,1426003,9463295,-1841304,154862,-198796,-3804025,-5955104,-4195634,-4485277,2898985,1978361,1142239,-988737,9409193,-3205744,894517,1606478},
		{0,0,0,0,0,0,0,7707161,-3210627,-1751105,-1898045,-4862023,-3470391,-2214791,-164614,-5625407,1704720,-162789,1058901,-4040265,-11094051,-11240782,-4277352,3075254,1065447,234919,-912108,650889,150505,89522,-509848,-1766909,277069,-7775749,1180521,-1906123,-2596068,-578000,357487,367605,-646039,2484350,2560723,-2311007,-195134,-5880504,1481832,-645252,765355,2637470,2458334,907216,2880116,-2988096,-1995274,-783123,393286,-5564831,1655303,-297358,-1033184},
		{0,0,0,0,0,0,0,0,7473799,-3528010,-3376497,-3304459,-1503292,-2411204,89031,-5943125,1917870,1311823,-122953,-4332928,-11706073,-11653524,-3963993,3185910,1308114,-1090325,-48253,-510843,-290876,1024800,623728,-1974078,169173,-6030119,-477907,-2291701,-2499215,-533396,449148,352872,-885457,2684378,2523291,-2661828,-154622,-6156614,1638839,973738,-705099,2787313,2932584,3357426,1068284,-3746916,-2087932,-673963,-44993,-5854907,2108010,-584389,-737864},
		{0,0,0,0,0,0,0,0,0,7674168,-5061376,-1170678,-3391201,-1173129,-624707,-4576847,1695880,476307,-158287,-3332444,-9534973,-9589812,-3359207,2586819,946168,852391,-121459,-417820,-187145,-994183,727155,-1116115,-339665,-5873899,366444,-529818,-3127321,-861888,762433,675088,-804551,2122875,2007541,-1390150,-899468,-4708544,1257097,336976,-271853,2382850,2263714,2150539,755793,-943518,-3487005,-942169,853872,-5023503,1542516,-396522,-857101},
		{0,0,0,0,0,0,0,0,0,0,7676071,-1157770,-3401474,-1256009,-647207,-4486485,1690858,608305,-257057,-3350870,-9555891,-9589812,-3250732,2572294,948690,646779,76395,-432195,-170690,1147802,-1408811,-1083128,-383340,-5876692,381082,-2650521,-978117,-962546,746717,749606,-760829,2024721,2095214,-1355683,-815464,-5012953,1493020,421631,-389564,2325617,2413194,2271141,678383,-1024047,-3555556,-851184,779183,-4684921,1214615,-415255,-854396},
		{0,0,0,0,0,0,0,0,0,0,0,8064414,-3701394,-2310077,287117,-5317816,1555682,130010,978906,-4169702,-11195194,-11240782,-4157808,3204649,1299856,130348,1033123,-1142203,701920,-27570,-660547,-1635451,-1672910,-5915594,1031074,-1979946,-2368771,-664404,614133,645425,-1082134,2441715,2443669,-2964969,-100626,-5598599,1199646,-218183,621491,2897493,2894383,1396294,3009586,-3031303,-2134450,-403409,839727,-5502336,1239352,-1319653,-1327582},
		{0,0,0,0,0,0,0,0,0,0,0,0,7209204,-664777,-850019,-3914508,1380687,-396598,882119,-3458436,-9122862,-9177070,-3454519,2713532,1139070,-9605,1098575,766756,-1302001,-282375,-582102,-2863014,-392040,-5742588,66937,-664050,-1225271,-1034744,544433,606184,-476333,2033048,2032012,-1039768,-1543121,-4192878,1227365,-664222,753326,2349673,2331917,192786,2496085,-814587,-3847450,-315744,1314137,-4125681,1287673,-515796,-1501943},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,9788325,207618,816655,-768078,-1874570,-1613116,235288,1694932,1621948,377883,-507902,-243766,773939,679052,391398,78143,70943,516176,-2961954,104444,936801,186178,-971859,-1257559,238423,462669,670075,314213,-672481,-566615,-1309880,-1073728,1594210,361560,472243,414552,-597724,-260047,-772016,-887315,216603,1073384,-1323896,-231085,509060,-359227,499417,197952},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,9689335,704290,-2495107,-343154,-545326,1594815,4764261,4694945,1741823,-997869,-298676,-333203,-157564,218154,283497,127218,-147690,764431,-2838739,1284848,-1411175,796176,1142228,598938,-102712,48775,1098536,-1137672,-1030484,-190599,-1133802,2347281,-484327,960682,908055,-1281146,-997818,-1308632,-1286716,1401975,747166,-70699,-1684165,2374406,-334264,-130586,172260},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12856576,-3650442,-153223,-509349,2984690,6258554,6402344,758796,-1671327,-526914,472,-173308,381688,-160284,71948,598991,1047898,-1081349,5230227,283473,949081,1517248,1102581,-184126,-184437,1235250,-2015041,-1859118,2256388,834088,2086134,-801538,-649920,1155134,-692225,-1974792,-1934348,-2169637,884616,1606568,60140,-2105033,4180691,-919229,-60329,382106},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16061715,284740,738712,-15990290,-39765302,-39992484,-13609368,9753282,2972046,156313,398252,-793746,-90924,240150,-692225,-6722501,-3772274,-23064086,2458558,-6920292,-7778422,-2161491,1501233,1325224,-2446757,7918006,7606452,-6908594,-2985205,-19436137,4164401,147843,-1345055,8477804,9636350,9222882,9766063,-6790882,-8657391,-2361496,460093,-18777173,6979470,-2385573,-3107404},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8943975,-1726046,-4422865,-11965780,-11979204,-4298851,3162346,1105638,-1701684,969212,-119091,-9373,-1028843,-1922549,-3197247,-773590,-6887291,370210,-890213,-1733307,-744361,921020,773952,-860450,2177367,2171512,-1578001,82087,-6649715,2701955,-2078191,-154198,2614010,2515825,2606238,3755822,-2042299,-3216470,-2271286,202674,-5822175,1364777,91778,-759997},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9279076,-4122768,-12397404,-12391946,-4508748,3316732,1261182,601366,-1733920,-1652447,-1685738,458865,205135,-3458419,-842673,-6972261,527616,-1230943,-1544141,-784368,985452,885839,-1107901,2315732,2157857,-1772253,29449,-5009984,946688,-309783,-1779855,2773685,2303574,3556282,2884208,-2088659,-2834284,-2541311,179041,-5926123,1727548,-243610,-508396},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-169515,-28616431,-28456656,-8272206,5944023,1391497,485357,302324,-110825,-524670,-196731,-977499,-4449426,-1278290,-17503766,1839778,-4409581,-5168434,-1911570,1277831,1087315,-2245147,5878400,5664632,-5254766,-2052598,-12525819,2249452,-760678,-200644,5096033,7585065,6981948,5551021,-4598968,-6184469,-1312378,1910194,-14358844,4952535,-1312334,-2111121},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30614535,17938173,6069703,-5141440,-2452230,-103399,-496191,122684,393306,-3324,566726,3441613,1599877,10965699,-524256,3387788,3919040,1422213,-446145,-526119,1510412,-3928170,-3932323,3871650,1934802,8916034,-2690702,481386,192736,-4163786,-3890368,-6141496,-4425174,3039163,4071256,1008284,-859215,8542837,-2865634,1060847,1616493},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17938173,996719,-2434152,932374,-96427,-220179,-58991,238588,118573,324122,1231670,777902,3346342,-205884,1209513,1379528,452829,-128851,99329,589815,-1361698,-1180023,1389694,949257,2644065,-1080600,338992,-127446,-1231583,-2950726,-956807,-1519733,628094,1443407,427124,-92232,2537576,-990861,413479,652123},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-471422,6195991,1113967,149453,586130,-240462,-399150,-155398,-961888,-4449688,-1287357,-15294819,-325756,-4396733,-5152212,-2127711,1175047,1191243,-2026174,5763885,5756828,-5394757,-2209287,-15074258,4780945,-306775,-304869,6116930,5044574,5755905,5855058,-3347241,-5023645,-1292896,1911983,-12155731,2753977,-1306931,-2119034},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30596457,5128965,754357,967489,-977486,-1008316,643303,-1400440,-12958386,-4650101,-44458241,1661554,-12902311,-14956077,-5499032,2838837,2653009,-5547818,15749833,15441678,-14780057,-6668242,-36591537,9732117,-1394283,-684778,17053686,16846975,16925457,17740069,-10816408,-17150081,-3704620,4622406,-35229968,10987703,-3590848,-5669752},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17938173,654583,1067326,-996386,-996386,654583,-1409128,-13004611,-4694945,-44687429,1707399,-12946569,-15010281,-5549450,2760215,2760215,-5549450,15661640,15661640,-14868401,-6558735,-36722790,9672038,-1267248,-854505,17073993,17073993,17227159,17639902,-13090061,-15153773,-3685660,4624005,-35368479,11026349,-3627619,-5691331},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9631898,-1482633,54818,-22922,-3162578,-1646591,-1985126,-1181733,-7097260,453277,-3345419,-1996393,-812280,784881,857171,-502614,2435906,2422919,-1673523,-1532476,-5928779,1352122,-1765015,288456,2407858,2242905,2337000,3499857,-1642341,-2653975,-104749,1590181,-6486955,2704544,-2191444,-860476},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9131652,-1750631,-1402232,-1529487,433940,-1873892,-1577241,-7430724,775874,-3809289,-1785056,-851404,930039,885092,-756411,2516119,2516287,-1981708,-1520743,-6312272,1579176,443212,-1765501,2589914,2723308,3868037,2631217,-2338451,-2857429,-336626,1456269,-4733684,1188362,-2559537,-533359},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9635236,-3480355,234715,-1713339,-1786009,-942300,-6582053,567358,-1268897,-3199024,94337,278625,223866,-1227,1998075,1954983,-1882173,-989347,-4837419,1501913,-378133,-1579650,2169282,1939921,2835185,2284326,-1471866,-2331364,603310,774412,-4564306,1649815,546095,-3560514},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9133055,576931,-1838090,-1575644,-546667,-5974924,102294,-1609096,-3954897,245672,84620,174242,69164,2035174,2040868,-2039600,-666835,-5288842,1679362,-63614,-1983947,2125508,2331261,3175056,2199594,-1918560,-2327297,474751,231166,-5196035,1875155,-931648,-1133053},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9773489,-1862392,-1398658,-521372,-7079075,102521,-4088987,-2503670,-646979,958975,915398,-912326,2433740,2400479,-2163102,-1113484,-6239150,1369007,-1551509,-55720,2828224,2821130,3000805,3768919,-2097824,-2821885,-223074,-602973,-4947020,2564102,-2223357,-901689},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8706420,-1366175,-519201,-5818939,115095,-1601087,-4568129,257121,-40389,-142522,367959,2032813,1977819,-1731039,-1039554,-4723662,1379294,-2100472,68686,2239639,2209012,1929147,3196402,-1858975,-2543681,-956770,713196,-4624084,1609316,1105386,-1561099},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9977044,-10005,738692,-243966,-1685611,-1277420,613866,998578,-1141612,274748,-398265,-403453,-1280821,1087012,1393099,592586,376394,72343,-801939,-841500,-544546,-895294,-133277,916054,-1535713,-471115,418431,-500743,23010,169846},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10057852,1115332,-1483870,684017,102058,1144549,128732,125507,-700360,-851573,-849399,1747805,-1125075,2181772,-307616,882249,761661,-1217332,-1182985,-1419944,-1535269,1248311,347458,-226997,-1943992,1859797,-501906,59397,-138990},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19603777,-3093355,2705916,3198213,1279848,-89116,-147602,1323054,-2640907,-4821370,3326828,26654,9292167,-2513710,-56919,-250815,-4451120,-3165932,-3434306,-3564544,3493641,3467468,724596,-622178,6745180,-2739488,752126,1361112},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10734403,-5132425,-6004834,-2452839,1523012,1570478,-2067370,5007404,7163899,-6403237,-4721012,-15151743,5283223,-625742,-179878,7573329,6289278,6598196,7073180,-3058860,-5889436,-1742525,2385418,-14706099,3413449,-1547209,-2557578},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9429030,-1579437,323947,-1105324,1021651,613824,-400720,-407706,-1344265,-157865,297588,-536963,876120,576127,-238217,-239680,-462730,-697919,368196,1243333,216098,769755,1283325,568448,-1851094,-247410},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9563652,-146178,-106418,-81968,1318504,-838181,-809205,-1197217,321988,1677085,-495026,393228,642730,-913139,-910948,-1384543,-1249486,527322,1555940,1777437,-318896,1831454,-476864,1224177,-662168},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8838223,129822,106460,-3781000,978397,950268,-2389032,-686959,-3009043,548512,-1637754,-1939260,1143706,1010841,1661983,1453029,-1245950,-1105731,-1908689,-872500,-2607359,887605,-2120318,-762565},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9407258,-3329207,-543404,495433,481935,-639390,-1645077,-2949971,-1125543,-437749,-331550,723091,653061,720077,769009,-491982,-982378,-1366743,-1520225,-2789582,-1051088,760491,-358717},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9412838,-543963,529994,533542,-878505,-1815960,-2987879,-1027427,-342803,-215904,671108,727978,768631,578377,-543201,-699854,759555,-1492685,-2966777,-947133,-1393669,-375174},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9322729,990421,993122,-2766044,-920818,-3085722,719448,-1609236,-1539816,1326448,1448740,981107,1344461,-797117,-1314329,-1795929,1202468,-3038978,843359,-1429736,-3222343},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5600698,-7094995,3505347,1677739,8777107,-3043075,174980,-6288,-5704747,-5414472,-5816802,-5963228,1298304,2336971,941672,-922438,7623462,-1994802,918570,1451741},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5669038,3381247,1560351,8618204,-2849997,119959,158191,-5430756,-5669979,-5805779,-5828349,1234328,2315406,937305,-900239,9610408,-4033535,902614,1438372},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9684432,119461,1491972,-864527,-1862235,-1619349,-650694,-930447,-1076932,-1168424,832989,-74466,856824,741985,1744852,-825050,859086,695081},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9760389,1434945,-2639535,-197156,-543339,-1300570,-1619230,-1579874,-1620101,27263,1559717,1159568,218374,3651176,-685618,106377,630957},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13873087,-3395506,344530,-88120,-2871807,-2466149,-2305917,-2707507,1670567,2475144,1381304,-88777,5538967,-1315201,127143,743682},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14738568,-577570,-177486,8031699,7662445,9117774,9535613,-6246703,-8146638,-1076730,2607313,-18135663,7145410,-2145377,-2919021},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8948369,-1764389,2088085,2503927,2545236,1574731,-1638344,-2525936,-59661,1356156,-5360968,1502987,392027,-368960},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9130925,2218720,2309016,1411297,2630133,-1528201,-2222238,-340818,1438399,-5296828,1729061,115197,-229295},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5288782,-2468150,-3178646,-3176211,1064242,1810760,357359,-1230268,7368719,-2040753,949232,1171497},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5337396,-5819478,-6125576,3533536,4354519,428621,-1309456,9322395,-3447675,1028222,1316063},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11962726,1120471,-1276353,-2407025,-519383,544834,-4922921,2040958,-357661,-999724},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11932308,-1257381,-1942319,-740746,603229,-4828882,2181421,-504243,-933866},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12468168,2467027,616024,-1458923,8802460,-2560956,999619,1240917},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13625898,957609,-1467811,10212037,-2432498,1187653,1760262},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8529162,44483,-3881070,914013,-2915631,-1377678},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9139606,-4197005,-1086105,333347,-1196056},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13337711,-3610183,1073383,753978},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15732413,-1189288,-2921216},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8409697,-1554249},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10842338}};
	static int s[61][61]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,10073848,3548639,1815793,2027614,-685064,-713206,384210,194997,191338,774290,1003453,1017050,428633,322923,-1075530,-1055311,-226724,-360063,650127,627888,752097,1429091,-891206,-370811,166955,8517,33001,539591,829982,893382,591068,749604,412098,710846,531854,617418,569381,421819,209795,-187607,38855,-246742,-70665,323680,-306626,1313064,252035,359595,-641626,2146670,450372,544572,974197,970167,685179,842290,413805,710415,641225,672422},
		{0,0,10109758,-781009,-1010509,1890047,1859624,-299404,-48150,110393,-321309,127888,150481,109738,99866,-792513,-769672,-356709,265956,1027277,1009222,-627888,-966020,1015023,752628,-50284,88982,246951,-55014,416996,477553,506287,854074,533805,582544,518398,603574,429213,350288,319924,-131064,-573935,203417,-175601,277745,1142629,-511495,690957,138430,2249771,-274693,1168420,548042,122162,114411,353241,701754,276705,324816,359546,404334},
		{0,0,0,9318628,-1465214,-379577,-296717,1548855,-163448,87398,-322720,1992691,2059199,238076,323387,-1182750,-150896,-217083,-646361,-70697,-792513,1075530,-745609,237041,-138673,-107528,1139783,952412,617749,381368,-50541,582857,529005,542286,938840,513432,132373,88577,360837,-140940,31598,-46372,703250,141432,-364301,1327432,507491,749677,-736067,2283835,1289791,-918231,322981,-300697,-201852,1011354,579317,689558,740063,583661,198558},
		{0,0,0,0,9525899,183886,-140179,-84488,1425603,1019961,2102675,728989,322404,533201,303846,-1327432,-749565,-841902,-383446,-258563,-1142629,-306626,1424693,-669550,410595,845735,-615335,-616139,407036,1719820,1739733,1324835,657335,948123,847509,823198,760491,497749,181639,-417041,-56122,392609,386226,-168048,-173909,1374468,970448,-591665,869959,2296097,844298,354274,-922605,676732,304912,939640,672190,1029280,1270876,797609,837817},
		{0,0,0,0,0,10101791,-599126,-1495326,-2131242,-279534,1027681,-154979,1905806,544527,-956896,-542286,-1603695,137,-554735,-1478096,-533805,412098,412702,253606,-248690,-94879,-219182,-368662,1098949,1375467,1374865,929543,2028437,2357544,2194488,1035746,1188443,626950,511997,248938,-647454,338658,-504181,-14801,-645026,948123,1809872,271102,733117,1180007,2040804,-141671,817507,-51641,1658234,930437,789454,1116057,1017334,1088753,1137943},
		{0,0,0,0,0,0,9965406,294915,161409,-1978734,-677810,1716065,-476988,-829956,301167,-689558,-1725934,169475,-703750,-1423594,-276705,413805,609164,-1355668,1616180,136776,-415582,-548725,522508,1238487,1090973,2236917,723124,1116057,1080690,2301594,1985767,456349,211711,-643329,-61929,883541,40312,-831300,92752,1029280,1870930,5936,922600,1163360,2033501,-237440,274819,1555024,-306251,1265237,970157,1398089,1304994,1267008,1050572},
		{0,0,0,0,0,0,0,9455411,-1510944,187219,422146,-3251745,-1430459,-48777,567080,-323387,-105601,194867,-838816,227594,-99866,322923,-173581,-332767,187293,-246330,1006617,-787936,-338903,-72859,314167,30318,903463,-956896,566500,-207989,255058,-218289,138051,62055,235340,358754,-456209,142003,-705946,303846,8141,-458522,938283,202993,-548420,1327027,-168721,-1411301,412784,192453,33840,301167,-228004,-296438,171784},
		{0,0,0,0,0,0,0,0,9555644,-634455,-2024743,-2028703,201659,-374435,705946,-364301,460877,-1033368,880317,388391,277745,-323680,-314696,420677,-209682,907772,598427,822447,-259416,-1374481,-1367602,-539048,619100,645026,-1382240,-441739,-433341,-341831,-34570,219882,375144,33921,-120954,556038,-912101,173909,-589699,1282467,-938397,120165,-76721,-194366,1320694,-2384819,-48471,-6903,195461,-92752,-672308,-514031,-479562},
		{0,0,0,0,0,0,0,0,0,10364621,-3811053,-288635,-2003496,427109,-62055,-140940,914305,-1178850,477785,383068,319924,-209795,-363388,750164,-808159,-1001478,740730,1013772,-491691,599275,-1262478,387159,-248832,-248938,-398738,595298,-1301930,-327223,-150855,79658,459105,225110,9644,-566398,219882,417041,-959827,990976,-468241,215172,21883,16527,1064643,-163042,-1897300,-205594,280188,643329,-809582,-1050403,-802084},
		{0,0,0,0,0,0,0,0,0,0,10304892,1097416,-584577,903583,138051,-360837,-655599,-766294,-565518,-389124,-350288,421819,492429,-369929,474565,-358107,-184581,-741037,377647,-13578,1592741,1253222,354489,511997,582183,-68465,1508451,444122,-114401,150855,-330718,628580,-369675,-928995,34570,181639,801390,786908,478109,705838,-296006,-333894,2034273,1029649,-705664,457864,85076,211711,848831,1505096,928627},
		{0,0,0,0,0,0,0,0,0,0,0,10807115,23060,345938,903463,-529005,-777043,-16402,-1329038,-525818,-854074,749604,471151,-805745,813652,-73160,-1480632,658381,31428,1379093,1573128,1038572,-88151,2028437,1701283,1063674,1204145,500478,354489,248832,-298841,268741,-568994,-504155,-619100,657335,958289,184137,1419884,1026456,183407,2045993,729610,-207553,1608578,851797,791284,723124,1084875,1815967,1553990},
		{0,0,0,0,0,0,0,0,0,0,0,0,10318773,1130957,33840,-579317,-1014476,199622,-1538324,-372173,-701754,842290,570996,-259915,534694,138873,-1626163,-1655486,1580957,1336998,1170942,259178,791284,789454,579841,2181651,2056497,318584,85076,-280188,-56984,787054,-37089,-974697,-195461,672190,1067415,-77371,1592128,975058,116100,2021029,214989,1689816,-650727,1127444,933159,970157,1412675,1649898,1903783},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,9639653,-246330,107528,310149,-1153983,-1478699,217415,50284,166955,161601,-116650,520787,-140804,-170314,-59720,531510,681783,463749,-3190405,-73160,-94879,106964,-1379009,-1337772,612300,-358107,1001478,-305639,-40156,36680,1280885,-907772,845735,977959,-88136,-37750,93016,-12792,50568,361937,133113,819885,-1541056,138873,136776,296474,220882,225128},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,9455411,-1548855,-1327027,194867,458522,548420,299404,384210,202993,456209,358754,-48777,-142003,-235340,-218289,30318,192453,-72859,-3251745,-1495326,-1411301,-207989,-296438,-338903,422146,-187219,787936,187293,332767,-1006617,1510944,-84488,-168721,838816,938283,-173581,-227594,105601,8141,566500,-228004,314167,-1430459,294915,412784,255058,171784},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9318628,-918231,217083,749677,1289791,-781009,-1815793,-2283835,703250,46372,-238076,141432,31598,-88577,-582857,-1011354,-381368,-1992691,379577,300697,-513432,-583661,-617749,322720,87398,952412,138673,237041,1139783,-163448,1465214,-322981,-646361,736067,745609,-70697,-150896,-507491,-938840,-740063,50541,-2059199,296717,201852,-132373,-198558},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9366725,239427,274854,-875466,1168420,-450372,-36916,-901303,-1778168,-50568,202880,654659,-886936,-380586,-931771,-382382,-2045993,141671,150298,-714527,-912445,-724395,333894,16527,1131648,71139,419516,1400473,-194366,-354274,1370158,983080,-1185154,-497648,826358,-315612,-637431,-861221,-617974,62102,-2021029,237440,240868,-282551,-466279},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9107636,-1618486,49667,356709,-226724,91780,-38746,332565,-1153983,264787,47924,381604,-1683014,-1583360,-1683014,-16402,137,109289,605001,376413,381604,-766294,1178850,-47924,332565,38746,-264787,1033368,-841902,932180,1618486,-89570,91780,-49667,-239427,932180,109289,-14748,-1583360,199622,169475,-14748,376413,121534},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9430347,575005,690957,-252035,-349451,564728,-556792,88136,-1011186,-991207,-2015366,-457171,113147,-1662370,-184137,-271102,-615937,-88030,90307,46323,-786908,990976,377848,176847,324349,-180275,1282467,591665,-1186711,-144650,1369689,-156305,160001,983080,-553694,-52848,-628708,-2205485,77371,-5936,-27911,-266108,-47895},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9892701,-274693,-2146670,-40627,-464886,-2184399,12792,555681,549076,-548474,-1037168,-881541,-487307,-183407,-2040804,-174626,-837310,-684086,-12117,296006,21883,446862,-822442,1193708,339025,-76721,-844298,1159232,160001,-294770,-280012,1929874,826358,-1375351,-385767,-328489,-390691,-116100,-2033501,-145880,-715354,-596881},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10109758,-3548639,-2249771,203417,573935,-109738,-175601,-131064,-429213,-506287,-353241,-416996,-127888,-1890047,-122162,-518398,-359546,55014,321309,110393,246951,-752628,1015023,88982,-48150,1010509,-548042,265956,-138430,966020,1027277,-769672,511495,-582544,-324816,-477553,-150481,-1859624,-114411,-603574,-404334},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10073848,-641626,246742,38855,428633,70665,187607,569381,591068,685179,829982,1003453,-685064,974197,531854,641225,539591,774290,-191338,-33001,-370811,891206,-8517,-194997,2027614,544572,360063,359595,1429091,-650127,1055311,1313064,710846,710415,893382,1017050,-713206,970167,617418,672422},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9650591,-2226103,-437370,93016,-398116,-448790,703575,1063106,1164234,928398,1026456,1180007,-673360,858688,947959,687597,705838,-215172,-133451,1224544,-787254,-75243,-120165,2296097,395949,156305,623743,463232,280012,497648,645482,1460686,1662689,818541,975058,1163360,-715348,727388,876663},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10356582,-3801323,-36680,862962,779507,-497956,-681434,-550179,-54047,568994,504181,-1874509,-1011857,-881387,20373,369675,9644,365017,742391,-260763,540989,-120954,-386226,987068,324349,-345743,787254,1193708,419516,-160927,240058,-1369583,-235428,37089,-40312,-1793762,-569944,-464691},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10332390,-40156,-460565,-648252,698431,635757,765957,506720,268741,338658,-690022,1030479,1154656,555644,628580,-225110,-132479,1275419,-742391,-230549,-33921,392609,1990107,-176847,778274,1224544,822442,-71139,917099,-232520,1625911,691823,787054,883541,-767926,590846,728966},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9639653,-1280885,305639,612300,-3190405,-1541056,681783,345938,544527,133113,-1379009,220882,531510,903583,-427109,59720,520787,116650,170314,374435,533201,361937,1478699,-37750,161601,-217415,-310149,977959,106964,296474,463749,1130957,-829956,819885,-1337772,225128},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9542197,-732676,-1843811,-1881039,193856,383027,504155,14801,-361836,-2081210,-34398,148093,928995,-566398,434800,230549,540989,260646,556038,168048,106704,-180275,1314085,75243,339025,1400473,-753093,-446150,-677944,-130918,974697,831300,-1001736,-1999405,53151},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10596548,-3717806,-213986,-1969096,390699,298841,647454,-316040,-278950,-2001203,942609,330718,459105,-349051,132479,365017,434800,375144,56122,-243208,377848,1285755,133451,446862,1131648,-496044,-304459,-452499,928749,56984,61929,-222468,688033,-3160187},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10038127,1202708,-947943,1054012,500478,626950,1084874,1475487,-643142,1630193,444122,327223,-942609,555644,-20373,-148093,341831,497749,969010,-46323,2392480,687597,12117,724395,514498,1120123,576540,1739931,318584,456349,971353,416500,431676},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10884697,-43244,1220232,1038572,929543,1420834,491978,1803583,1054012,1253222,-387159,-390699,506720,54047,-383027,539048,1324835,1076200,1662370,529993,928398,487307,382382,1797057,1573000,1419422,1537872,259178,2236917,1935230,-233522,1382550},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9924096,1537872,851797,930437,1377257,2088435,-171109,1739931,457864,205594,-928749,691823,235428,130918,6903,939640,893440,2205485,560846,818541,390691,-62102,1773876,1450482,1195850,1056306,1127444,1265237,1164000,3110960,570357},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10884697,1379093,1375467,1573000,491978,-233522,1202708,-13578,-599275,213986,635757,681434,1881039,1374481,1719820,1797057,457171,529993,1063106,1037168,380586,1076200,1420834,1935230,-43244,1336998,1238487,1419422,1803583,1382550},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10807115,-154979,-207553,1063674,1815967,31428,1097416,288635,-658381,813652,805745,1480632,2028703,728989,729610,1329038,1419884,471151,525818,777043,958289,1701283,1084875,1573128,23060,1716065,1608578,1204145,1553990},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10101791,-51641,1035746,1088753,1098949,1027681,279534,368662,-248690,-253606,219182,2131242,183886,817507,554735,733117,412702,1478096,1603695,1809872,2194488,1017334,1374865,1905806,-599126,1658234,1188443,1137943},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10316742,1354558,1382532,1120123,1029649,163042,304459,-232520,-240058,446150,2384819,676732,428854,52848,838622,1460686,385767,861221,941340,3181394,2126928,1450482,1689816,1555024,-302301,1262477,1399098},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10629882,-201757,1475487,-68465,-595298,278950,1030479,1011857,2081210,441739,823198,980270,88030,836672,858688,837310,714527,980270,1354558,2449803,2088435,2181651,2301594,2449803,-201757,1772669},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10232054,416500,1505096,1050403,-688033,590846,569944,1999405,514031,797609,1149437,266108,512340,727388,715354,282551,976350,1262477,2210810,3110960,1649898,1267008,1617815,3201103,921690},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10038127,377647,491691,3717806,698431,497956,1843811,259416,407036,514498,2015366,2392480,703575,548474,886936,969010,1084874,971353,-947943,1580957,522508,576540,-643142,431676},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10304892,3811053,741037,474565,369929,184581,2024743,2102675,2034273,565518,478109,492429,389124,655599,801390,582183,848831,1592741,-584577,-677810,-705664,1508451,928627},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10364621,1013772,808159,750164,740730,-634455,-1019961,-1064643,477785,468241,363388,383068,914305,959827,398738,809582,1262478,2003496,1978734,1897300,1301930,802084},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10596548,648252,779507,-732676,822447,616139,496044,-991207,-1285755,448790,549076,654659,243208,316040,222468,1969096,1655486,548725,452499,2001203,3160187},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10332390,3801323,460565,209682,410595,917099,556792,778274,-437370,2184399,1778168,1990107,-690022,-767926,765957,534694,1616180,1625911,1154656,728966},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10356582,862962,420677,669550,160927,564728,345743,2226103,-464886,-901303,-987068,1874509,1793762,550179,259915,1355668,1369583,881387,464691},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9542197,598427,615335,753093,-1011186,-1314085,398116,555681,202880,-106704,361836,1001736,-193856,1626163,415582,677944,34398,-53151},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9555644,-1425603,-1320694,880317,938397,314696,388391,460877,589699,1382240,672308,1367602,-201659,-161409,48471,433341,479562},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9525899,-922605,383446,869959,1424693,258563,749565,970448,847509,1270876,1739733,322404,-140179,304912,760491,837817},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9636580,553694,534719,645482,1375351,637431,991478,941340,1371723,1773876,214989,274819,-87262,976350,1060836},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9430347,-1369689,349451,575005,274854,1186711,615937,27911,-113147,1538324,703750,628708,-90307,47895},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9863218,623743,294770,1185154,534719,838622,630744,560846,1592128,922600,630744,512340,241465},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9650591,40627,36916,395949,-673360,-715348,1164234,570996,609164,1662689,947959,876663},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9892701,-875466,-1159232,174626,145880,881541,372173,1423594,328489,684086,596881},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9366725,-1370158,-150298,-240868,931771,1014476,1725934,617974,912445,466279},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9636580,428854,-87262,893440,1067415,1870930,1371723,1149437,1060836},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10316742,-302301,1377257,579841,1080690,2126928,1382532,1399098},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9973937,1164000,1412675,1304994,2348652,1617815,1274290},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9924096,1170942,1090973,1195850,-171109,570357},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10318773,-476988,-650727,2056497,1903783},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9965406,-306251,1985767,1050572},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9973937,2210810,1274290},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10232054,921690},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12691094}};
	int t[121],u[1006],i,j,k,n,m,ct;
	double av,x,y,chsq;
	for(i=1;i<=59;i++){
		for(j=i+1;j<=60;j++){
			r[j][i]=r[i][j];
			s[j][i]=s[i][j];
		}
	}
	ct=0;pnum=0;
	for(m=1;m<=2;m++){
		n=1000;
		for(i=1;i<=120;i++) t[i]=0;
		for(i=1001;i<=1005;i++) u[i]=data[ct++];
		for(i=1;i<=n;i++){
			for(j=1;j<=5;j++) u[j]=u[1000+j];
			for(j=1;j<=1000;j++){
				k=kp(&u[j])+1;
				t[k]++;
				u[j+5]=data[ct++];
			}
		}
		chsq=0.0;
		av=(double)n*2000.0/120.0;
		for(i=1;i<=60;i++){
			x=(double)t[i]+(double)t[i+60]-av;
			y=(double)t[i]-(double)t[i+60];
			for(j=1;j<=60;j++)
				chsq+=x*(double)r[i][j]*((double)t[j]+(double)t[j+60]-av)
					 +y*(double)s[i][j]*((double)t[j]-(double)t[j+60]);
		}
		chsq/=2.0e+8*(double)n;
//		printf("For a sample of 1,000,000 consecutive 5-tuples,");
		pv[pnum]=chisq(chsq,99);pnum++;
//		printf(" chisquare for 99 degrees of freedom=',%lf,'; p-value=',%lf\n",chsq,pp[m]);
	}
}

double uni4(int dat)
{
	return (double)dat*0.806549e-9;
}

void cdosum(int data[],double pv[],int& pnum)
{
	double x[101],y[101],t[200],u[101],w[11];
	double f[101]={0.0000,
	0.0017,0.0132,0.0270,0.0406,0.0538,0.0665,0.0787,0.0905,0.1020,0.1133,
	0.1242,0.1349,0.1454,0.1557,0.1659,0.1760,0.1859,0.1957,0.2054,0.2150,
	0.2246,0.2341,0.2436,0.2530,0.2623,0.2716,0.2809,0.2902,0.2995,0.3087,
	0.3180,0.3273,0.3366,0.3459,0.3552,0.3645,0.3739,0.3833,0.3928,0.4023,
	0.4118,0.4213,0.4309,0.4406,0.4504,0.4602,0.4701,0.4800,0.4900,0.5000,
	0.5100,0.5199,0.5299,0.5397,0.5495,0.5593,0.5690,0.5787,0.5882,0.5978,
	0.6073,0.6167,0.6260,0.6354,0.6447,0.6540,0.6632,0.6724,0.6817,0.6910,
	0.7003,0.7096,0.7189,0.7282,0.7375,0.7468,0.7562,0.7657,0.7752,0.7848,
	0.7944,0.8041,0.8140,0.8239,0.8340,0.8442,0.8545,0.8650,0.8757,0.8867,
	0.8980,0.9095,0.9214,0.9337,0.9464,0.9595,0.9731,0.9868,0.9983,1.0000};
	int i,j,ij,ik,m,ct;
	double s,a,b,h,qq,p,pk;

	m=100;ct=0;pnum=0;
	for(ik=1;ik<=10;ik++){
		for(ij=1;ij<=100;ij++){
			s=0.0;
			for(i=1;i<200;i++){
				t[i]=uni4(data[ct++]);
				if(i<=m) s+=t[i];
			}
			y[1]=s;
			for(j=2;j<=m;j++)
				y[j]=y[j-1]-t[j-1]+t[m+j-1];
			x[1]=y[1]/sqrt((double)m);
			x[2]=-((double)m-1.0)*y[1]/sqrt((double)m*(2.0*(double)m-1.0))
				+y[2]*sqrt((double)m/(2.0*(double)m-1.0));
			qq=x[1]*x[1]+y[2]*y[2];
			for(i=3;i<=m;i++){
				a=2.0*(double)m+2.0-(double)i;
				b=4.0*(double)m+2.0-2.0*(double)i;
				x[i]=y[1]/sqrt(a*b)
					-sqrt((a-1.0)/(b+2.0))*y[i-1]+sqrt(a/b)*y[i];
				qq+=x[i]*x[i];
			}
			for(i=1;i<=m;i++){
				p=phi(x[i]);
				h=100.0*p;
				j=(int)h;
				x[i]=f[j]+(h-(double)j)*(f[j+1]-f[j]);
			}
			kstest(x,m,p);
			u[ij]=p;
		}
		kstest(u,100,pk);
		w[ik]=pk;
//		printf(" Test no. %2d      p-value %lf\n",ik,pk);
	}
	kstest(w,10,p);pv[pnum]=p;pnum++;
//	printf(" KSTEST on the above 10 p-values: %lf\n",p);
}

double uni(int dat)
{
	static double po=0.00000000023283064365386962890625;
	return 0.5+po*(double)dat;
}

void cdpark(int data[],double pv[],int& pnum)
{
	int ntries=12000,nt=10;
	double sq=100.0;
	double x[4001],y[4001],g[11];
	int ct,mk,i,ij,k,n;
	double z,w,s,ss,av,sig,pp;
	pnum=0;
	ct=0;s=ss=0.0;
//	printf(" CDPARK: result of ten tests\n  Of 12,000 tries, the average no. of successes\n  should be 3523 with sigma=21.9\n");
	for(ij=1;ij<=nt;ij++){
		x[1]=sq*uni(data[ct++]);
		y[1]=sq*uni(data[ct++]);
		k=1;
		for(n=1;n<=ntries;n++){
			z=sq*uni(data[ct++]);
			w=sq*uni(data[ct++]);
			mk=0;
			for(i=1;i<=k;i++)
				if(fabs(x[i]-z)<=1.0 && fabs(y[i]-w)<=1.0) {mk=1;break;}
			if(mk==1) continue;
			k++;
			x[k]=z;
			y[k]=w;
		}
		s+=(double)k;
		ss+=(double)k*(double)k;
		z=((double)k-3523.0)/21.9;
		g[ij]=phi(z);
//		printf("Successes: %5d    z-score: %lf p-value:%lf\n",k,z,g[ij]);
	}
	av=s/(double)nt;
	sig=sqrt(ss/(double)nt-av*av);
//	printf("square size  avg. no. parked sample sigma\n %lf %lf %lf\n",sq,av,sig);
	kstest(g,10,pp);pv[pnum]=pp;pnum++;
//	printf("KSTEST for the above 10: p=%lf\n",pp);
}

int kthr(int dat,double cc)
{
	return (int)(cc*(double)dat+3.0);
}

void craptest(int data[],double pv[],int& pnum)
{
	double e[22],cc,sum,pwins,pthrows,av,sd,t,ex,sp;
	int nt[22],ct=0,k,i,ng,nwins,lp,nthrows,iwin,m;
	//FILE* fp=fopen("check.txt","w");
	cc=6.0*pow(0.5,32.0);ct=0;pnum=0;
	//printf("\ncc=%1.20lf\n",cc);
	e[1]=1.0/3.0;sum=e[1];
	for(k=2;k<=20;k++){
		e[k]=(27.0*pow(27.0/36.0,(double)(k-2))
			 +40.0*pow(26.0/36.0,(double)(k-2))
			 +55.0*pow(25.0/36.0,(double)(k-2)))/648.0;
		sum+=e[k];
		//printf("e[%d]=%lf\n",k,e[k]);
	}
	e[21]=1.0-sum;
	ng=200000;nwins=0;
	for(i=1;i<=21;i++) nt[i]=0;
	for(i=1;i<=ng;i++){
		if(ct>(RNDCHKNUM32-3)) {printf("end");pv[0]=0.0;pnum=1;return;}///////////////////////////////////
		//fprintf(fp,"%d,%d",data[ct],data[ct+1]);
		lp=2+kthr(data[ct],cc)+kthr(data[ct+1],cc);
		ct+=2;
		//fprintf(fp,",%d\n",lp);
		nthrows=1;
		//printf("%d,%d\n",ct,lp);
		if(lp==7 || lp==11) iwin=1;
		else if(lp==2 || lp==3 || lp==12) iwin=0;
		else{
			while(1){
				if(ct>RNDCHKNUM32-3) {pv[0]=0.0;pnum=1;return;}///////////////////////////
				k=2+kthr(data[ct],cc)+kthr(data[ct+1],cc);
				ct+=2;
				nthrows++;
				if(k==7) {iwin=0;break;}
				else if(k==lp){iwin=1;break;}
			}
		}
		m=21;if(m>nthrows) m=nthrows;
		nt[m]++;nwins+=iwin;
	}
	av=244.0*(double)ng/495.0;
	sd=sqrt(av*251.0/495.0);
	t=((double)nwins-av)/sd;
//	printf(" Results of craps test\n  No. of wins:  Observed Expected\n");
//	printf("%d %lf\n",nwins,av);
	pwins=phi(t);
	//printf("\nt=%lf pwins=%lf\n",t,pwins); 
//	printf("%d= No. of wins, z-score=%lf pvalue= %lf\n   Analysis of Throws-per-Game:\n",nwins,t,pwins);
	sum=0.0;
	for(i=1;i<=21;i++){
		ex=(double)ng*e[i];
		sp=((double)nt[i]-ex)*((double)nt[i]-ex)/ex;
		sum+=sp;
//		printf("%2d %5d %lf %lf %lf\n",i,nt[i],ex,sp,sum);
	}
	pthrows=chisq(sum,20);
//	printf(" Chisq= %lf for 20 degrees of freedom, p= %lf\n",sum,pthrows);
//	printf(" p-value for no. of wins: %lf\n",pwins);
	pv[pnum]=pwins;pnum++;
//	printf(" p-value for no. of throws/game: %lf\n",pthrows);
	pv[pnum]=pthrows;pnum++;
//	fclose(fp);
}

double uni2(int dat)
{
	return 500.0+(double)dat*0.2328306e-6;
}

void d3sphere(int data[],double pv[],int& pnum)
{
	double x[4001],y[4001],z[4001],p[21];
	int ct,ij,n,i,j;
	double dmin,u,v,w,d,r3,pp;
	ct=0;pnum=0;
	n=4000;
	for(ij=1;ij<=20;ij++){
		dmin=10000000.0;
		for(i=1;i<=n;i++) 
			x[i]=uni2(data[ct++]);
		sort(x,n);
		for(i=1;i<=n;i++){
			y[i]=uni2(data[ct++]);
			z[i]=uni2(data[ct++]);
		}
		for(i=1;i<=n;i++){
			u=x[i];v=y[i];w=z[i];
			for(j=i+1;j<=n;j++){
				d=(u-x[j])*(u-x[j]);
				if(d>=dmin) break;
				d+=(v-y[j])*(v-y[j])+(w-z[j])*(w-z[j]);
				if(d<dmin) dmin=d;
			}
		}
		r3=dmin*sqrt(dmin);
		p[ij]=1.0-exp(-r3/30.0);
//		printf("  sample no. %2d   r^3= %lf  p-value=%lf\n",ij,r3,p[ij]);
	}
//	printf(" A KS test is applied to those 20 p-values.\n");
	kstest(p,20,pp);pv[pnum]=pp;pnum++;
//	printf(" 3DSPHERES test       p-value=%lf\n",pp);
}

float uni1(int dat)
{
	return (float)(5000.0+(float)dat*0.2328306e-5);
}

void mindist(int data[],double pv[],int& pnum)
{
	float xy[16003];
	double *qq,dmin,p,u,v,d,sum,g[101];
	int n,ns,ct,ij,i,j;

	qq=(double *)xy;pnum=0;
	n=8000;ns=100;
//	printf("               This is the MINIMUM DISTANCE test\n              for random integers \n");
//	printf("Sample no.      d^2      avg equiv uni\n");
	ct=0;sum=0.0;
	for(ij=1;ij<=ns;ij++){
		dmin=10000000.0;
		for(i=2;i<=16001;i++) xy[i]=uni1(data[ct++]);
		sort(qq,8000);
		for(i=3;i<=16001;i+=2){
			u=(double)xy[i];v=(double)xy[i-1];
			for(j=i+2;j<=16001;j+=2){
				d=(u-(double)xy[j])*(u-(double)xy[j]);
				if(d>=dmin) break;
				d+=(v-(double)xy[j-1])*(v-(double)xy[j-1]);
				if(d<dmin) dmin=d;
			}
		}
		d=dmin;
		sum+=d;
		g[ij]=1.0-exp(-dmin/0.995);
//		if(ij%5==0) printf("%10d %lf %lf %lf\n",ij,d,sum/(double)ij,g[ij]);
	}
//	printf("MINIMUM DISTANCE TEST \n");
//	printf(" Result of KS test on 20 transformed mindist^2's:\n");
	kstest(g,ns,p);pv[pnum]=p;pnum++;
//	printf("                        p-value=%lf\n",p);
}

void rank3132(int data[],int m,double pv[],int& pnum)
{
	int i,ij,k,ct,n,ntries;
	double s,e,d,pp;
	unsigned int row[33];
	int tbl[4];
	double p[4]={0.2887880952,0.5775761902,0.1283502644,0.0052854502};

	ct=0;n=m;pnum=0;
//	printf(" Rank test for %2d x %2d binary matrices:\n",m,n);
//	printf("  rows from leftmost %2d bits of each 32-bit integer\n",m);
	for(i=0;i<=3;i++) tbl[i]=0;
	ntries=40000;
	for(ij=1;ij<=ntries;ij++){
		for(i=1;i<=m;i++){
			row[i]=(unsigned int)data[ct++] >> (32-m);
		}
		k = n - rank(row,m,n);
		if(k>3) k=3;
		tbl[k]++;
	}
//	printf("      rank   observed   expected      (o-e)^2/e         sum\n");
	s=0.0;
	for(i=3;i>=0;i--){
		e=p[i]*(double)ntries;
		d=((double)tbl[i]-e)*((double)tbl[i]-e)/e;
		s+=d;
//		printf("%10d %10d %10.1lf   %12.6lf   %9.3lf\n",n-i,tbl[i],e,d,s);
	}
	pp=chisq(s,3);pv[pnum]=pp;pnum++;
//	printf("chisquare=%lf for 3 d. of f.; p-value=%lf\n",s,pp);
}

void udruns(double x[],int n,double& uv,double& dv,int& ifault)
{
	int ucount[7],dcount[7],ru,rd;
	double b[7],rn;
	double a[7][7]={{0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		{0.0,4529.4, 9044.9, 13568.0, 18091.0, 22615.0, 27892.0},
		{0.0,0.0,18097.0, 27139.0, 36187.0, 45234.0, 55789.0},
		{0.0,0.0,0.0,40721.0, 54281.0, 67852.0, 83685.0},
		{0.0,0.0,0.0,0.0,72414.0, 90470.0, 111580.0},
		{0.0,0.0,0.0,0.0,0.0,113262.0,139476.0},
		{0.0,0.0,0.0,0.0,0.0,0.0,172860.0}};
	int i,j,j1;
	ifault=0;
	if(n<4000) {ifault=n;return;}
	for(j=2;j<=6;j++){
		j1=j-1;
		for(i=1;i<=j1;i++)
			a[j][i]=a[i][j];
	}
	b[1]=1.0/6.0;
	b[2]=5.0/24.0;
	b[3]=11.0/120.0;
	b[4]=19.0/720.0;
	b[5]=29.0/5040.0;
	b[6]=1.0/840.0;
	for(i=1;i<=6;i++)
		ucount[i]=dcount[i]=0;
	ru=rd=1;
	for(j=2;j<=n;j++){
		if(x[j]<=x[j-1]) {
			ucount[ru]++;ru=1;
			if(rd<6) rd++;
			continue;
		}
		else{
			dcount[rd]++;rd=1;
			if(ru<6) ru++;
		}
	}
	ucount[ru]++;dcount[rd]++;
	uv=dv=0.0;rn=(double)n;
	for(i=1;i<=6;i++){
		for(j=1;j<=6;j++){
			uv+=((double)ucount[i]-rn*b[i])*((double)ucount[j]-rn*b[j])*a[i][j];
			dv+=((double)dcount[i]-rn*b[i])*((double)dcount[j]-rn*b[j])*a[i][j];
		}
	}
	uv/=rn;dv/=rn;
}

double ch(double x)
{
	return 1.0-exp(-0.5*x)*(1.0+0.5*x+0.125*x*x);
}

void runtest(int data[],double pv[],int& pnum)
{
	int ns=10,nxs=10000,i,j,k,ifault,ct;
	double x[10001],up[101],dn[101],uv,dv,p;
	ct=0;pnum=0;
	for(k=1;k<=2;k++){
		for(j=1;j<=ns;j++){
			for(i=1;i<=nxs;i++)
				x[i]=(double)data[ct++]*2.328306e-10;
			udruns(x,nxs,uv,dv,ifault);
			up[j]=ch(uv);
			dn[j]=ch(dv);
		}
		kstest(up,ns,p);pv[pnum]=p;pnum++;
//		printf("   runs up; ks test for 10 p's: %lf\n",p);
		kstest(dn,ns,p);pv[pnum]=p;pnum++;
//		printf("   runs down; ks test for 10 p's:%lf\n",p);
	}
}

int get8b(int data[],int ct)
{
	unsigned int dat;
	dat=(unsigned int)data[ct/4];
	switch(ct%4){
	case 0:dat>>=24;break;
	case 1:dat>>=16;break;
	case 2:dat>>=8;break;
	}
	return dat & 0x000000ff;
}

void sknt1s(int data[],double pv[],int& pnum)
{
	int w,t[3125],s[625],kbits[256],p[5]={37,56,70,56,37};
	int jj,j,ks,i,n,ct,jk,i1,i2,ii;
	double q4,q5,e,chsq,z;
	for(jj=0;jj<256;jj++){
		j=jj;ks=0;
		for(i=1;i<=8;i++){
			ks+=(j & 1);
			j>>=1;
		}
		if(ks<2) ks=2;
		else if(ks>6) ks=6;
		kbits[jj]=ks-2;
	}
	n=100;ct=0;pnum=0;
	for(jk=1;jk<=2;jk++){
		for(i=0;i<625;i++) s[i]=0;
		for(i=0;i<3125;i++) t[i]=0;
		w=625*kbits[get8b(data,ct++)];
		w+=125*kbits[get8b(data,ct++)];
		w+=25*kbits[get8b(data,ct++)];
		w+=5*kbits[get8b(data,ct++)];
		w+=kbits[get8b(data,ct++)];
		for(i2=1;i2<=n;i2++){
			for(i1=1;i1<=25600;i1++){
				w%=625;s[w]++;
				w=w*5+kbits[get8b(data,ct++)];t[w]++;
			}
		}
		q4=0.0;
		for(ii=0;ii<625;ii++){
			i=ii;e=25600.0*(double)n;
			for(j=0;j<=3;j++){
				e*=(double)p[i%5]/256.0;
				i/=5;
			}
			q4+=((double)s[ii]-e)*((double)s[ii]-e)/e;
		}
		q5=0.0;
		for(ii=0;ii<3125;ii++){
			i=ii;e=25600.0*(double)n;
			for(j=0;j<=4;j++){
				e*=(double)p[i%5]/256.0;
				i/=5;
			}
			q5+=((double)t[ii]-e)*((double)t[ii]-e)/e;
		}
		chsq=q5-q4;
		z=(chsq-2500.0)/sqrt(5000.0);
//		if(jk==1){
//			printf("Chi-square with 5^5-5^4=2500 d.of f. for sample size: %d \n  chisquare  equiv normal  p-value\n",25600*n);
//			printf(" Results for COUNT-THE-1's in successive bytes:\n");
//		}
		pv[pnum]=phi(z);
//		printf(" byte stream : %lf %lf %lf\n",chsq,z,pv[pnum]);
		pnum++;
	}
}

double uni3(int dat)
{
	return 0.5+(double)dat*pow(0.5,32.0);
}

void sqeez(int data[],double pv[],int& pnum)
{
	double tbl[49],cq[49],ex[49]={
		0.0,0.0,0.0,0.0,0.0,0.0,21.03,57.79,175.54,467.32,1107.83, 2367.84,
		4609.44,8241.16,13627.81,20968.49,30176.12,40801.97,52042.03,
		62838.28,72056.37,78694.51,82067.55,81919.35,78440.08,72194.12,
		63986.79,54709.31,45198.52,36136.61,28000.28,21055.67,15386.52,
		10940.20,7577.96,5119.56,3377.26,2177.87,1374.39,849.70,515.18,
		306.66, 179.39, 103.24, 58.51, 32.69, 18.03,  9.82, 11.21};
	int i,j,k,ct;
	double chsq,sig;
	pnum=0;
	for(i=0;i<=48;i++) tbl[i]=cq[i]=0.0;
	ct=0;
	for(i=1;i<=100000;i++){
		j=0;k=2147483647;
		do{
			if(ct>=2500000) {
				pv[pnum]=0.0;pnum++;return;
			}
			k=(int)((double)k*uni3(data[ct++])+1.0);
			j++;
		}while(k>1);
		if(j<6) j=6;
		else if(j>48) j=48;
		tbl[j]++;
	}
	chsq=0.0;
	for(i=6;i<=48;i++){
		cq[i]=(tbl[i]-0.1*ex[i])*(tbl[i]-0.1*ex[i])/(0.1*ex[i]);
		chsq+=cq[i];
	}
	sig=sqrt(84.0);
//	printf("RESULTS OF SQUEEZE TEST\n");
//	printf("Table of standardized frequency counts\n");
//	printf("( (obs-exp)/sqrt(exp) )^2\n");
//	printf("for j taking values <=6,7,8,...,47,>=48:\n");
//	for(i=6;i<=48;i++) printf("%lf ",cq[i]);
//	printf("\n Chi-square with 42 degrees of freedom:%lf\n",chsq);
	pv[pnum]=chisq(chsq,42);
//	printf("z-score=%lf  p-value=%lf\n",(chsq-42.)/sig,pv[pnum]);
	pnum++;
}

int get8b1(int dat,int jk)
{
	unsigned int dt;
	dt=(unsigned int)dat>>(25-jk);
	return dt & 0x000000ff;
}

void wknt1s(int data[],double pv[],int& pnum)
{
	int w,t[3125],s[625];
	int k[256]={
	0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,2,0,0,0,1,0,1,1,2,0,1,1,2,1,2,2,3,
	0,0,0,1,0,1,1,2,0,1,1,2,1,2,2,3,0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,
	0,0,0,1,0,1,1,2,0,1,1,2,1,2,2,3,0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,
	0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,4,
	0,0,0,1,0,1,1,2,0,1,1,2,1,2,2,3,0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,
	0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,4,
	0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,4,
	1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,4,2,3,3,4,3,4,4,4,3,4,4,4,4,4,4,4};
	int p[5]={37,56,70,56,37};
	int jk,ct,n,i,i1,i2,j,ii;
	double q4,q5,e,chsq,z,p28;
	pnum=0;
	n=10;p28=pow(2.0,-8.0);
	for(jk=1;jk<=25;jk++){
		ct=0;
		for(i=0;i<625;i++) s[i]=0;
		for(i=0;i<3125;i++) t[i]=0;
		w=625*k[get8b1(data[ct++],jk)];
		w+=125*k[get8b1(data[ct++],jk)];
		w+=25*k[get8b1(data[ct++],jk)];
		w+=5*k[get8b1(data[ct++],jk)];
		w+=k[get8b1(data[ct++],jk)];
		for(i1=1;i1<=25600;i1++){
			for(i2=1;i2<=n;i2++){
				w%=625;s[w]++;
				w=5*w+k[get8b1(data[ct++],jk)];
				t[w]++;
			}
		}
		q4=0.0;
		for(ii=0;ii<625;ii++){
			i=ii;
			e=25600.0*(double)n;
			for(j=1;j<=4;j++){
				e*=(double)p[i%5]*p28;
				i/=5;
			}
			q4+=((double)s[ii]-e)*((double)s[ii]-e)/e;
		}
		q5=0.0;
		for(ii=0;ii<3125;ii++){
			i=ii;
			e=25600.0*(double)n;
			for(j=1;j<=5;j++){
				e*=(double)p[i%5]*p28;
				i/=5;
			}
			q5+=((double)t[ii]-e)*((double)t[ii]-e)/e;
		}
		chsq=q5-q4;
		z=(chsq-2500.0)/sqrt(5000.0);
//		if(jk==1){
//			printf(" Chi-square with 5^5-5^4=2500 d.of f. for sample size: %d\n",25600*n);
//			printf("             chisquare  equiv normal  p value\n");
//			printf("  Results for COUNT-THE 1's in specified bytes:\n");
//		}
		pv[pnum]=phi(z);
//		printf("           bits %2d to %2d %lf %lf %lf\n",jk,jk+7,chsq,z,pv[pnum]);
		pnum++;
	}
}

void getparametertext(char pmsg[])
{
	int ml=0;
	char cr=0x0d,lf=0x0a;
	sprintf(&pmsg[ml],"** Parameters **%c%c",cr,lf);ml=(int)strlen(pmsg);
	sprintf(&pmsg[ml],"θ=%4x(%lf)%c%c",Modsr.Stc,(double)Modsr.Stc/(double)Modsr.Qx,cr,lf);ml=(int)strlen(pmsg);
	sprintf(&pmsg[ml],"α=%4x(%lf)%c%c",Modsr.Al,(double)Modsr.Al/(double)Modsr.Qx,cr,lf);ml=(int)strlen(pmsg);
	sprintf(&pmsg[ml],"β=%4x(%lf)%c%c",Modsr.Bt,(double)Modsr.Bt/(double)Modsr.Qx,cr,lf);ml=(int)strlen(pmsg);
	sprintf(&pmsg[ml],"γ=%4x(%lf)%c%c",Modsr.Gm,(double)Modsr.Gm/(double)Modsr.Qx,cr,lf);ml=(int)strlen(pmsg);
	sprintf(&pmsg[ml],"κ=%4x(%lf)%c%c",Modsr.K,(double)Modsr.K/(double)Modsr.Qx,cr,lf);ml=(int)strlen(pmsg);
	sprintf(&pmsg[ml],"σ=%4x(%lf)%c%c",Modsr.D,(double)Modsr.D/(double)Modsr.Qx,cr,lf);ml=(int)strlen(pmsg);
	sprintf(&pmsg[ml],"ε=%4x(%lf)%c%c",Modsr.E,(double)Modsr.E/(double)Modsr.Qx,cr,lf);
}

int appmsg(char msg[],int ml,char *head,double pvalue[],int pnum,int pass)
{
	char cr=0x0d,lf=0x0a;
	sprintf(&msg[ml],"%s",head);ml=(int)strlen(msg);
	for(int i=0;i<pnum;i++){
		sprintf(&msg[ml],"%lf ",pvalue[i]);ml=(int)strlen(msg);
	}
	if(pass==1) sprintf(&msg[ml],": ** Pass **;%c%c",cr,lf);
	else sprintf(&msg[ml],": ** False **;%c%c",cr,lf);
	ml=(int)strlen(msg);
	return ml;
}


int diehard(int* Dat32,int* result)
{
	int pnum,mk,mkt,mkn,i;
	int ml=0;
	double pvalue[50];
	//char msg[2048],pmsg[2048];
	char cr=0x0d,lf=0x0a;
	char res[64];
	//FILE *fp;
	mkt=mkn=0;
	int test_number=0;
	//FILE* fp1=fopen("diehard_result_debug.txt","w");
	for(i=0;i<64;i++) res[i]='\0';
	cdbday(Dat32,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=0;ml=appmsg(msg,ml,"Birthday Spacing Test : ",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	cdoperm5(Dat32,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=appmsg(msg,ml,"Overlapping 5-Permutation Test :",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	rank3132(Dat32,31,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=appmsg(msg,ml,"Binary Rank Test for 31x31 matrices : ",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	rank3132(Dat32,32,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=appmsg(msg,ml,"Binary Rank Test for 32x32 matrices : ",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	cdbinrnk(Dat32,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=appmsg(msg,ml,"Binary Rank Test for 6x8 matrices : ",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	cdbitst(Dat32,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=appmsg(msg,ml,"Bitstream Test : ",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	cdomso(Dat32,1,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=appmsg(msg,ml,"OPSO Test : ",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	cdomso(Dat32,2,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=appmsg(msg,ml,"OQSO Test : ",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	cdomso(Dat32,3,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=appmsg(msg,ml,"DNA Test : ",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	sknt1s(Dat32,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=appmsg(msg,ml,"Count-The-1's Test on a stream of bytes : ",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	wknt1s(Dat32,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=appmsg(msg,ml,"Count-The-1's Test on a stream of bytes : ",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	cdpark(Dat32,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=appmsg(msg,ml,"Parking Lot Test : ",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	mindist(Dat32,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=appmsg(msg,ml,"Minimum Distance Test : ",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	d3sphere(Dat32,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=appmsg(msg,ml,"3DSpheres Test : ",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	sqeez(Dat32,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=appmsg(msg,ml,"Sqeezed Test : ",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	cdosum(Dat32,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=appmsg(msg,ml,"Overlapping Sum Test : ",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	runtest(Dat32,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=appmsg(msg,ml,"Runs Test : ",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	craptest(Dat32,pvalue,pnum);mk=decrand(pvalue,pnum);mkt+=mk;res[mkn]='0'+mk;mkn++;//printf("%1d",mk);
	//ml=appmsg(msg,ml,"Craps Test : ",pvalue,pnum,mk);
	result[test_number]=mk;
	test_number++;

	if(mkt==mkn) return 1; else return 0;
}
